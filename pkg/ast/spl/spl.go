// Code generated by pigeon; DO NOT EDIT.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"reflect"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

//Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func resolveAstToSimpleSearch(astNode *ast.Node) (*structs.SimpleSearchExpr, error) {
	if astNode.NodeType != ast.NodeTerminal {
		return nil, fmt.Errorf("Spl peg: TransactionSearch: %v", "Only Terminal Nodes are allowed")
	}

	node := astNode.Comparison

	var value interface{}
	var exprType utils.SS_DTYPE

	switch v := node.Values.(type) {
	case string:
		value = removeQuotes(v)
		exprType = utils.SS_DT_STRING
	case int, int32, int64, float32, float64, json.Number:
		value = json.Number(reflect.ValueOf(v).String())
		exprType = utils.SS_DT_SIGNED_NUM
	case bool:
		boolValue, err := strconv.ParseBool(reflect.ValueOf(v).String())
		if err != nil {
			boolValue = strings.ToLower(reflect.ValueOf(v).String()) == "true"
		}
		value = boolValue
		exprType = utils.SS_DT_BOOL
	default:
		value = v
		exprType = utils.SS_INVALID
	}

	return &structs.SimpleSearchExpr{
		Op:           node.Op,
		Field:        node.Field,
		Values:       value,
		ValueIsRegex: node.ValueIsRegex,
		ExprType:     exprType,
	}, nil
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 189, col: 1, offset: 5081},
			expr: &actionExpr{
				pos: position{line: 189, col: 10, offset: 5090},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 189, col: 10, offset: 5090},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 189, col: 10, offset: 5090},
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 10, offset: 5090},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 17, offset: 5097},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 32, offset: 5112},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 52, offset: 5132},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 189, col: 65, offset: 5145},
								expr: &ruleRefExpr{
									pos:  position{line: 189, col: 66, offset: 5146},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 80, offset: 5160},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 189, col: 95, offset: 5175},
								expr: &ruleRefExpr{
									pos:  position{line: 189, col: 96, offset: 5176},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 189, col: 119, offset: 5199},
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 119, offset: 5199},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 126, offset: 5206},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 260, col: 1, offset: 7418},
			expr: &actionExpr{
				pos: position{line: 260, col: 23, offset: 7440},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 260, col: 23, offset: 7440},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 260, col: 23, offset: 7440},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 23, offset: 7440},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 260, col: 35, offset: 7452},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 42, offset: 7459},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 264, col: 1, offset: 7500},
			expr: &actionExpr{
				pos: position{line: 264, col: 16, offset: 7515},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 264, col: 16, offset: 7515},
					exprs: []any{
						&notExpr{
							pos: position{line: 264, col: 16, offset: 7515},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 18, offset: 7517},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 264, col: 26, offset: 7525},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 26, offset: 7525},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 38, offset: 7537},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 45, offset: 7544},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 268, col: 1, offset: 7585},
			expr: &actionExpr{
				pos: position{line: 268, col: 16, offset: 7600},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 268, col: 16, offset: 7600},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 268, col: 16, offset: 7600},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 21, offset: 7605},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 268, col: 28, offset: 7612},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 268, col: 28, offset: 7612},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 268, col: 42, offset: 7626},
										name: "RegexBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 273, col: 1, offset: 7702},
			expr: &actionExpr{
				pos: position{line: 273, col: 25, offset: 7726},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 273, col: 25, offset: 7726},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 273, col: 32, offset: 7733},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 273, col: 32, offset: 7733},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 51, offset: 7752},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 69, offset: 7770},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 81, offset: 7782},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 94, offset: 7795},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 106, offset: 7807},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 117, offset: 7818},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 134, offset: 7835},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 148, offset: 7849},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 165, offset: 7866},
								name: "TransactionBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 278, col: 1, offset: 7964},
			expr: &actionExpr{
				pos: position{line: 278, col: 21, offset: 7984},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 278, col: 21, offset: 7984},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 278, col: 21, offset: 7984},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 278, col: 26, offset: 7989},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 278, col: 37, offset: 8000},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 278, col: 40, offset: 8003},
								expr: &choiceExpr{
									pos: position{line: 278, col: 41, offset: 8004},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 278, col: 41, offset: 8004},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 278, col: 47, offset: 8010},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 278, col: 53, offset: 8016},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 278, col: 68, offset: 8031},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 75, offset: 8038},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 296, col: 1, offset: 8542},
			expr: &actionExpr{
				pos: position{line: 296, col: 20, offset: 8561},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 296, col: 20, offset: 8561},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 296, col: 20, offset: 8561},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 25, offset: 8566},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 35, offset: 8576},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 40, offset: 8581},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 296, col: 56, offset: 8597},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 296, col: 65, offset: 8606},
								expr: &ruleRefExpr{
									pos:  position{line: 296, col: 66, offset: 8607},
									name: "GroupbyBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 341, col: 1, offset: 10101},
			expr: &actionExpr{
				pos: position{line: 341, col: 17, offset: 10117},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 341, col: 17, offset: 10117},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 341, col: 17, offset: 10117},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 20, offset: 10120},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 27, offset: 10127},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 352, col: 1, offset: 10476},
			expr: &actionExpr{
				pos: position{line: 352, col: 15, offset: 10490},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 352, col: 15, offset: 10490},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 352, col: 15, offset: 10490},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 25, offset: 10500},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 352, col: 34, offset: 10509},
								expr: &seqExpr{
									pos: position{line: 352, col: 35, offset: 10510},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 352, col: 35, offset: 10510},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 352, col: 45, offset: 10520},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 352, col: 64, offset: 10539},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 68, offset: 10543},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 380, col: 1, offset: 11122},
			expr: &actionExpr{
				pos: position{line: 380, col: 17, offset: 11138},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 380, col: 17, offset: 11138},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 380, col: 17, offset: 11138},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 23, offset: 11144},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 380, col: 36, offset: 11157},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 380, col: 41, offset: 11162},
								expr: &seqExpr{
									pos: position{line: 380, col: 42, offset: 11163},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 380, col: 43, offset: 11164},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 380, col: 43, offset: 11164},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 380, col: 49, offset: 11170},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 380, col: 56, offset: 11177},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 398, col: 1, offset: 11554},
			expr: &actionExpr{
				pos: position{line: 398, col: 17, offset: 11570},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 398, col: 17, offset: 11570},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 398, col: 17, offset: 11570},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 23, offset: 11576},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 398, col: 36, offset: 11589},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 398, col: 41, offset: 11594},
								expr: &seqExpr{
									pos: position{line: 398, col: 42, offset: 11595},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 398, col: 42, offset: 11595},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 398, col: 45, offset: 11598},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 416, col: 1, offset: 11963},
			expr: &choiceExpr{
				pos: position{line: 416, col: 17, offset: 11979},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 416, col: 17, offset: 11979},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 416, col: 17, offset: 11979},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 416, col: 17, offset: 11979},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 416, col: 25, offset: 11987},
										expr: &ruleRefExpr{
											pos:  position{line: 416, col: 25, offset: 11987},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 416, col: 30, offset: 11992},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 416, col: 36, offset: 11998},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12294},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 427, col: 5, offset: 12294},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 12, offset: 12301},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 431, col: 1, offset: 12342},
			expr: &choiceExpr{
				pos: position{line: 431, col: 17, offset: 12358},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 431, col: 17, offset: 12358},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 431, col: 17, offset: 12358},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 431, col: 17, offset: 12358},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 431, col: 25, offset: 12366},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 431, col: 32, offset: 12373},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 431, col: 45, offset: 12386},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 433, col: 5, offset: 12423},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 433, col: 5, offset: 12423},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 10, offset: 12428},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 439, col: 1, offset: 12586},
			expr: &actionExpr{
				pos: position{line: 439, col: 15, offset: 12600},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 439, col: 15, offset: 12600},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 439, col: 21, offset: 12606},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 439, col: 21, offset: 12606},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 439, col: 44, offset: 12629},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 439, col: 68, offset: 12653},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 444, col: 1, offset: 12794},
			expr: &actionExpr{
				pos: position{line: 444, col: 19, offset: 12812},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 444, col: 19, offset: 12812},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 444, col: 19, offset: 12812},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 444, col: 24, offset: 12817},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 444, col: 38, offset: 12831},
							label: "binOptions",
							expr: &zeroOrOneExpr{
								pos: position{line: 444, col: 49, offset: 12842},
								expr: &ruleRefExpr{
									pos:  position{line: 444, col: 50, offset: 12843},
									name: "BinOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 63, offset: 12856},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 69, offset: 12862},
								name: "SingleAggExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 84, offset: 12877},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 444, col: 94, offset: 12887},
								expr: &ruleRefExpr{
									pos:  position{line: 444, col: 95, offset: 12888},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 505, col: 1, offset: 14929},
			expr: &actionExpr{
				pos: position{line: 505, col: 18, offset: 14946},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 505, col: 18, offset: 14946},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 505, col: 18, offset: 14946},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 23, offset: 14951},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 39, offset: 14967},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 53, offset: 14981},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 54, offset: 14982},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 519, col: 1, offset: 15322},
			expr: &actionExpr{
				pos: position{line: 519, col: 18, offset: 15339},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 519, col: 18, offset: 15339},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 519, col: 18, offset: 15339},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 21, offset: 15342},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 27, offset: 15348},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 519, col: 37, offset: 15358},
							label: "tcOptions",
							expr: &zeroOrOneExpr{
								pos: position{line: 519, col: 47, offset: 15368},
								expr: &ruleRefExpr{
									pos:  position{line: 519, col: 48, offset: 15369},
									name: "TcOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 530, col: 1, offset: 15597},
			expr: &actionExpr{
				pos: position{line: 530, col: 14, offset: 15610},
				run: (*parser).callonTcOptions1,
				expr: &seqExpr{
					pos: position{line: 530, col: 14, offset: 15610},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 530, col: 14, offset: 15610},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 20, offset: 15616},
							label: "option",
							expr: &choiceExpr{
								pos: position{line: 530, col: 28, offset: 15624},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 530, col: 28, offset: 15624},
										name: "BinOptions",
									},
									&oneOrMoreExpr{
										pos: position{line: 530, col: 41, offset: 15637},
										expr: &ruleRefExpr{
											pos:  position{line: 530, col: 42, offset: 15638},
											name: "TcOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 573, col: 1, offset: 17173},
			expr: &actionExpr{
				pos: position{line: 573, col: 13, offset: 17185},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 573, col: 13, offset: 17185},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 573, col: 13, offset: 17185},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 19, offset: 17191},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 31, offset: 17203},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 43, offset: 17215},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 49, offset: 17221},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 53, offset: 17225},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 578, col: 1, offset: 17338},
			expr: &actionExpr{
				pos: position{line: 578, col: 16, offset: 17353},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 578, col: 16, offset: 17353},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 578, col: 24, offset: 17361},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 578, col: 24, offset: 17361},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 578, col: 36, offset: 17373},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 578, col: 49, offset: 17386},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 578, col: 61, offset: 17398},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 587, col: 1, offset: 17747},
			expr: &actionExpr{
				pos: position{line: 587, col: 15, offset: 17761},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 587, col: 15, offset: 17761},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 587, col: 27, offset: 17773},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 595, col: 1, offset: 17998},
			expr: &actionExpr{
				pos: position{line: 595, col: 16, offset: 18013},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 595, col: 16, offset: 18013},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 595, col: 16, offset: 18013},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 25, offset: 18022},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 31, offset: 18028},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 42, offset: 18039},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 602, col: 1, offset: 18185},
			expr: &actionExpr{
				pos: position{line: 602, col: 15, offset: 18199},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 602, col: 15, offset: 18199},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 602, col: 15, offset: 18199},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 24, offset: 18208},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 40, offset: 18224},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 50, offset: 18234},
								name: "TimeScale",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 60, offset: 18244},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 615, col: 1, offset: 18558},
			expr: &actionExpr{
				pos: position{line: 615, col: 14, offset: 18571},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 615, col: 14, offset: 18571},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 615, col: 24, offset: 18581},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 615, col: 24, offset: 18581},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 615, col: 33, offset: 18590},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 615, col: 42, offset: 18599},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 615, col: 49, offset: 18606},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 615, col: 54, offset: 18611},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 615, col: 61, offset: 18618},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 615, col: 69, offset: 18626},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 615, col: 78, offset: 18635},
								name: "Subseconds",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 620, col: 1, offset: 18757},
			expr: &actionExpr{
				pos: position{line: 620, col: 14, offset: 18770},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 620, col: 14, offset: 18770},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 620, col: 14, offset: 18770},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 620, col: 20, offset: 18776},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 28, offset: 18784},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 620, col: 34, offset: 18790},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 620, col: 41, offset: 18797},
								expr: &choiceExpr{
									pos: position{line: 620, col: 42, offset: 18798},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 620, col: 42, offset: 18798},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 620, col: 50, offset: 18806},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 61, offset: 18817},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 620, col: 76, offset: 18832},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 86, offset: 18842},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 646, col: 1, offset: 19434},
			expr: &actionExpr{
				pos: position{line: 646, col: 19, offset: 19452},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 646, col: 19, offset: 19452},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 646, col: 19, offset: 19452},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 646, col: 24, offset: 19457},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 38, offset: 19471},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 679, col: 1, offset: 20449},
			expr: &actionExpr{
				pos: position{line: 679, col: 18, offset: 20466},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 679, col: 18, offset: 20466},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 679, col: 18, offset: 20466},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 679, col: 23, offset: 20471},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 679, col: 23, offset: 20471},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 33, offset: 20481},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 43, offset: 20491},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 49, offset: 20497},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 50, offset: 20498},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 67, offset: 20515},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 679, col: 78, offset: 20526},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 679, col: 78, offset: 20526},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 84, offset: 20532},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 99, offset: 20547},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 108, offset: 20556},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 109, offset: 20557},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 120, offset: 20568},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 128, offset: 20576},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 129, offset: 20577},
									name: "Options",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 721, col: 1, offset: 21617},
			expr: &choiceExpr{
				pos: position{line: 721, col: 19, offset: 21635},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 721, col: 19, offset: 21635},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 721, col: 19, offset: 21635},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 721, col: 19, offset: 21635},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 721, col: 25, offset: 21641},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 32, offset: 21648},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 724, col: 3, offset: 21702},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 724, col: 3, offset: 21702},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 724, col: 3, offset: 21702},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 724, col: 9, offset: 21708},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 724, col: 17, offset: 21716},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 724, col: 23, offset: 21722},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 724, col: 30, offset: 21729},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Options",
			pos:  position{line: 729, col: 1, offset: 21827},
			expr: &actionExpr{
				pos: position{line: 729, col: 12, offset: 21838},
				run: (*parser).callonOptions1,
				expr: &labeledExpr{
					pos:   position{line: 729, col: 12, offset: 21838},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 729, col: 19, offset: 21845},
						expr: &ruleRefExpr{
							pos:  position{line: 729, col: 20, offset: 21846},
							name: "Option",
						},
					},
				},
			},
		},
		{
			name: "Option",
			pos:  position{line: 778, col: 1, offset: 23393},
			expr: &actionExpr{
				pos: position{line: 778, col: 11, offset: 23403},
				run: (*parser).callonOption1,
				expr: &seqExpr{
					pos: position{line: 778, col: 11, offset: 23403},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 778, col: 11, offset: 23403},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 778, col: 17, offset: 23409},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 27, offset: 23419},
								name: "OptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 37, offset: 23429},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 778, col: 43, offset: 23435},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 49, offset: 23441},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionCMD",
			pos:  position{line: 783, col: 1, offset: 23550},
			expr: &actionExpr{
				pos: position{line: 783, col: 14, offset: 23563},
				run: (*parser).callonOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 783, col: 14, offset: 23563},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 783, col: 22, offset: 23571},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 783, col: 22, offset: 23571},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 783, col: 37, offset: 23586},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 783, col: 51, offset: 23600},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 783, col: 64, offset: 23613},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 783, col: 76, offset: 23625},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 783, col: 93, offset: 23642},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 791, col: 1, offset: 23829},
			expr: &choiceExpr{
				pos: position{line: 791, col: 13, offset: 23841},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 791, col: 13, offset: 23841},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 791, col: 13, offset: 23841},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 791, col: 13, offset: 23841},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 791, col: 16, offset: 23844},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 791, col: 26, offset: 23854},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 794, col: 3, offset: 23911},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 794, col: 3, offset: 23911},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 16, offset: 23924},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 798, col: 1, offset: 23982},
			expr: &actionExpr{
				pos: position{line: 798, col: 16, offset: 23997},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 798, col: 16, offset: 23997},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 798, col: 16, offset: 23997},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 21, offset: 24002},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 798, col: 32, offset: 24013},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 43, offset: 24024},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 814, col: 1, offset: 24399},
			expr: &choiceExpr{
				pos: position{line: 814, col: 15, offset: 24413},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 814, col: 15, offset: 24413},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 814, col: 15, offset: 24413},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 814, col: 15, offset: 24413},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 814, col: 31, offset: 24429},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 814, col: 45, offset: 24443},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 814, col: 48, offset: 24446},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 814, col: 59, offset: 24457},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 825, col: 3, offset: 24776},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 825, col: 3, offset: 24776},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 825, col: 3, offset: 24776},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 825, col: 19, offset: 24792},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 825, col: 33, offset: 24806},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 825, col: 36, offset: 24809},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 825, col: 47, offset: 24820},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 847, col: 1, offset: 25386},
			expr: &actionExpr{
				pos: position{line: 847, col: 13, offset: 25398},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 847, col: 13, offset: 25398},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 847, col: 13, offset: 25398},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 847, col: 18, offset: 25403},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 847, col: 26, offset: 25411},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 847, col: 34, offset: 25419},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 847, col: 40, offset: 25425},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 46, offset: 25431},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 847, col: 62, offset: 25447},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 847, col: 68, offset: 25453},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 72, offset: 25457},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 874, col: 1, offset: 26142},
			expr: &actionExpr{
				pos: position{line: 874, col: 14, offset: 26155},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 874, col: 14, offset: 26155},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 874, col: 14, offset: 26155},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 19, offset: 26160},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 28, offset: 26169},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 34, offset: 26175},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 874, col: 45, offset: 26186},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 874, col: 50, offset: 26191},
								expr: &seqExpr{
									pos: position{line: 874, col: 51, offset: 26192},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 874, col: 51, offset: 26192},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 874, col: 57, offset: 26198},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 901, col: 1, offset: 26999},
			expr: &actionExpr{
				pos: position{line: 901, col: 15, offset: 27013},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 901, col: 15, offset: 27013},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 901, col: 15, offset: 27013},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 21, offset: 27019},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 31, offset: 27029},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 37, offset: 27035},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 42, offset: 27040},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 914, col: 1, offset: 27441},
			expr: &actionExpr{
				pos: position{line: 914, col: 19, offset: 27459},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 914, col: 19, offset: 27459},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 914, col: 25, offset: 27465},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 922, col: 1, offset: 27612},
			expr: &actionExpr{
				pos: position{line: 922, col: 18, offset: 27629},
				run: (*parser).callonConditionExpr1,
				expr: &seqExpr{
					pos: position{line: 922, col: 18, offset: 27629},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 922, col: 18, offset: 27629},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 922, col: 23, offset: 27634},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 922, col: 31, offset: 27642},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 41, offset: 27652},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 922, col: 50, offset: 27661},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 922, col: 56, offset: 27667},
							label: "trueValue",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 66, offset: 27677},
								name: "ValueExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 922, col: 76, offset: 27687},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 922, col: 82, offset: 27693},
							label: "falseValue",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 93, offset: 27704},
								name: "ValueExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 922, col: 103, offset: 27714},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 934, col: 1, offset: 27964},
			expr: &choiceExpr{
				pos: position{line: 934, col: 13, offset: 27976},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 934, col: 13, offset: 27976},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 934, col: 14, offset: 27977},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 934, col: 14, offset: 27977},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 934, col: 22, offset: 27985},
										val:        "lower",
										ignoreCase: false,
										want:       "\"lower\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 934, col: 31, offset: 27994},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 934, col: 39, offset: 28002},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 50, offset: 28013},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 934, col: 61, offset: 28024},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 3, offset: 28336},
						run: (*parser).callonTextExpr10,
						expr: &seqExpr{
							pos: position{line: 948, col: 4, offset: 28337},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 948, col: 4, offset: 28337},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 948, col: 12, offset: 28345},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 948, col: 12, offset: 28345},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 948, col: 20, offset: 28353},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 948, col: 27, offset: 28360},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 948, col: 35, offset: 28368},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 948, col: 44, offset: 28377},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 948, col: 55, offset: 28388},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 948, col: 60, offset: 28393},
										expr: &seqExpr{
											pos: position{line: 948, col: 61, offset: 28394},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 948, col: 61, offset: 28394},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 948, col: 67, offset: 28400},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 948, col: 80, offset: 28413},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 971, col: 3, offset: 29107},
						run: (*parser).callonTextExpr25,
						expr: &seqExpr{
							pos: position{line: 971, col: 4, offset: 29108},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 971, col: 4, offset: 29108},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 971, col: 12, offset: 29116},
										val:        "urldecode",
										ignoreCase: false,
										want:       "\"urldecode\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 971, col: 25, offset: 29129},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 971, col: 33, offset: 29137},
									label: "url",
									expr: &ruleRefExpr{
										pos:  position{line: 971, col: 37, offset: 29141},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 971, col: 48, offset: 29152},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 983, col: 3, offset: 29491},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 983, col: 4, offset: 29492},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 983, col: 4, offset: 29492},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 983, col: 12, offset: 29500},
										val:        "split",
										ignoreCase: false,
										want:       "\"split\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 983, col: 21, offset: 29509},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 983, col: 29, offset: 29517},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 983, col: 40, offset: 29528},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 983, col: 51, offset: 29539},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 983, col: 57, offset: 29545},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 983, col: 63, offset: 29551},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 983, col: 74, offset: 29562},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 995, col: 3, offset: 29895},
						run: (*parser).callonTextExpr44,
						expr: &seqExpr{
							pos: position{line: 995, col: 4, offset: 29896},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 995, col: 4, offset: 29896},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 995, col: 12, offset: 29904},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 22, offset: 29914},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 995, col: 30, offset: 29922},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 995, col: 41, offset: 29933},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 52, offset: 29944},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 995, col: 58, offset: 29950},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 995, col: 69, offset: 29961},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 995, col: 81, offset: 29973},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 995, col: 93, offset: 29985},
										expr: &seqExpr{
											pos: position{line: 995, col: 94, offset: 29986},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 995, col: 94, offset: 29986},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 995, col: 100, offset: 29992},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 114, offset: 30006},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1029, col: 3, offset: 31192},
						run: (*parser).callonTextExpr60,
						expr: &seqExpr{
							pos: position{line: 1029, col: 3, offset: 31192},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1029, col: 3, offset: 31192},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1029, col: 14, offset: 31203},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1029, col: 22, offset: 31211},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1029, col: 28, offset: 31217},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1029, col: 38, offset: 31227},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 1029, col: 45, offset: 31234},
										expr: &seqExpr{
											pos: position{line: 1029, col: 46, offset: 31235},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1029, col: 46, offset: 31235},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1029, col: 52, offset: 31241},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1029, col: 66, offset: 31255},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 3, offset: 31625},
						run: (*parser).callonTextExpr72,
						expr: &seqExpr{
							pos: position{line: 1042, col: 4, offset: 31626},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1042, col: 4, offset: 31626},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1042, col: 12, offset: 31634},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1042, col: 12, offset: 31634},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 1042, col: 22, offset: 31644},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1042, col: 31, offset: 31653},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 39, offset: 31661},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 45, offset: 31667},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 57, offset: 31679},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1042, col: 73, offset: 31695},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 74, offset: 31696},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1042, col: 92, offset: 31714},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 1067, col: 1, offset: 32317},
			expr: &actionExpr{
				pos: position{line: 1067, col: 20, offset: 32336},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 1067, col: 20, offset: 32336},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1067, col: 20, offset: 32336},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1067, col: 26, offset: 32342},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 1067, col: 38, offset: 32354},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 1073, col: 1, offset: 32539},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 20, offset: 32558},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1073, col: 20, offset: 32558},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 1073, col: 20, offset: 32558},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1073, col: 20, offset: 32558},
									expr: &charClassMatcher{
										pos:        position{line: 1073, col: 20, offset: 32558},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 1073, col: 31, offset: 32569},
									expr: &litMatcher{
										pos:        position{line: 1073, col: 33, offset: 32571},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1076, col: 3, offset: 32613},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 1076, col: 3, offset: 32613},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1076, col: 3, offset: 32613},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 7, offset: 32617},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 13, offset: 32623},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 23, offset: 32633},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 1081, col: 1, offset: 32701},
			expr: &actionExpr{
				pos: position{line: 1081, col: 15, offset: 32715},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 15, offset: 32715},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1081, col: 15, offset: 32715},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1081, col: 20, offset: 32720},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 30, offset: 32730},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 40, offset: 32740},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 1093, col: 1, offset: 33033},
			expr: &actionExpr{
				pos: position{line: 1093, col: 13, offset: 33045},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 1093, col: 13, offset: 33045},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 1093, col: 18, offset: 33050},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 1098, col: 1, offset: 33120},
			expr: &actionExpr{
				pos: position{line: 1098, col: 19, offset: 33138},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 1098, col: 19, offset: 33138},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1098, col: 19, offset: 33138},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 25, offset: 33144},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 40, offset: 33159},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1098, col: 45, offset: 33164},
								expr: &seqExpr{
									pos: position{line: 1098, col: 46, offset: 33165},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1098, col: 46, offset: 33165},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1098, col: 49, offset: 33168},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 1118, col: 1, offset: 33606},
			expr: &actionExpr{
				pos: position{line: 1118, col: 19, offset: 33624},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1118, col: 19, offset: 33624},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1118, col: 19, offset: 33624},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1118, col: 25, offset: 33630},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 40, offset: 33645},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1118, col: 45, offset: 33650},
								expr: &seqExpr{
									pos: position{line: 1118, col: 46, offset: 33651},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1118, col: 46, offset: 33651},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 1118, col: 50, offset: 33655},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 1138, col: 1, offset: 34094},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 19, offset: 34112},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1138, col: 19, offset: 34112},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 1138, col: 19, offset: 34112},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1138, col: 19, offset: 34112},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 1138, col: 23, offset: 34116},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 31, offset: 34124},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 37, offset: 34130},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1138, col: 52, offset: 34145},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 3, offset: 34348},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 1148, col: 3, offset: 34348},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1148, col: 9, offset: 34354},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 1153, col: 1, offset: 34425},
			expr: &choiceExpr{
				pos: position{line: 1153, col: 19, offset: 34443},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1153, col: 19, offset: 34443},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1153, col: 19, offset: 34443},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1153, col: 19, offset: 34443},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1153, col: 27, offset: 34451},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1153, col: 33, offset: 34457},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1153, col: 48, offset: 34472},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1156, col: 3, offset: 34508},
						run: (*parser).callonBoolExprLevel18,
						expr: &seqExpr{
							pos: position{line: 1156, col: 4, offset: 34509},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1156, col: 4, offset: 34509},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 1156, col: 8, offset: 34513},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1156, col: 8, offset: 34513},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 1156, col: 19, offset: 34524},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 1156, col: 29, offset: 34534},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 1156, col: 39, offset: 34544},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1156, col: 49, offset: 34554},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 57, offset: 34562},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1156, col: 63, offset: 34568},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1156, col: 73, offset: 34578},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 3, offset: 34914},
						run: (*parser).callonBoolExprLevel120,
						expr: &labeledExpr{
							pos:   position{line: 1169, col: 3, offset: 34914},
							label: "likeExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1169, col: 13, offset: 34924},
								name: "LikeExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "LikeExpr",
			pos:  position{line: 1172, col: 1, offset: 34962},
			expr: &choiceExpr{
				pos: position{line: 1172, col: 13, offset: 34974},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1172, col: 13, offset: 34974},
						run: (*parser).callonLikeExpr2,
						expr: &seqExpr{
							pos: position{line: 1172, col: 13, offset: 34974},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1172, col: 13, offset: 34974},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1172, col: 18, offset: 34979},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1172, col: 28, offset: 34989},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1172, col: 34, offset: 34995},
									val:        "LIKE",
									ignoreCase: false,
									want:       "\"LIKE\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1172, col: 41, offset: 35002},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1172, col: 47, offset: 35008},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 1172, col: 53, offset: 35014},
										name: "ValueExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1181, col: 3, offset: 35234},
						run: (*parser).callonLikeExpr11,
						expr: &seqExpr{
							pos: position{line: 1181, col: 3, offset: 35234},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1181, col: 3, offset: 35234},
									val:        "like",
									ignoreCase: false,
									want:       "\"like\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1181, col: 10, offset: 35241},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 18, offset: 35249},
									label: "stringr",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 26, offset: 35257},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1181, col: 36, offset: 35267},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 42, offset: 35273},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 50, offset: 35281},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1181, col: 60, offset: 35291},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1190, col: 3, offset: 35522},
						run: (*parser).callonLikeExpr21,
						expr: &seqExpr{
							pos: position{line: 1190, col: 3, offset: 35522},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1190, col: 3, offset: 35522},
									val:        "match",
									ignoreCase: false,
									want:       "\"match\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1190, col: 11, offset: 35530},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 19, offset: 35538},
									label: "stringVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 29, offset: 35548},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1190, col: 39, offset: 35558},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 45, offset: 35564},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 53, offset: 35572},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1190, col: 63, offset: 35582},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 3, offset: 35816},
						run: (*parser).callonLikeExpr31,
						expr: &seqExpr{
							pos: position{line: 1199, col: 3, offset: 35816},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1199, col: 3, offset: 35816},
									val:        "cidrmatch",
									ignoreCase: false,
									want:       "\"cidrmatch\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1199, col: 15, offset: 35828},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 23, offset: 35836},
									label: "cidr",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 28, offset: 35841},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1199, col: 38, offset: 35851},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 44, offset: 35857},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 47, offset: 35860},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1199, col: 57, offset: 35870},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1208, col: 3, offset: 36090},
						run: (*parser).callonLikeExpr41,
						expr: &labeledExpr{
							pos:   position{line: 1208, col: 3, offset: 36090},
							label: "inExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 11, offset: 36098},
								name: "InExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1211, col: 3, offset: 36134},
						run: (*parser).callonLikeExpr44,
						expr: &labeledExpr{
							pos:   position{line: 1211, col: 3, offset: 36134},
							label: "boolComparisonExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 22, offset: 36153},
								name: "BoolComparisonExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 1215, col: 1, offset: 36212},
			expr: &actionExpr{
				pos: position{line: 1215, col: 23, offset: 36234},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 23, offset: 36234},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1215, col: 23, offset: 36234},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 28, offset: 36239},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 38, offset: 36249},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 41, offset: 36252},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 62, offset: 36273},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 68, offset: 36279},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "InExpr",
			pos:  position{line: 1227, col: 1, offset: 36505},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 11, offset: 36515},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1227, col: 11, offset: 36515},
						run: (*parser).callonInExpr2,
						expr: &seqExpr{
							pos: position{line: 1227, col: 11, offset: 36515},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1227, col: 11, offset: 36515},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 16, offset: 36520},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1227, col: 26, offset: 36530},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1227, col: 32, offset: 36536},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1227, col: 37, offset: 36541},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 45, offset: 36549},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 58, offset: 36562},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 68, offset: 36572},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1227, col: 73, offset: 36577},
										expr: &seqExpr{
											pos: position{line: 1227, col: 74, offset: 36578},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1227, col: 74, offset: 36578},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1227, col: 80, offset: 36584},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1227, col: 92, offset: 36596},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1246, col: 3, offset: 37147},
						run: (*parser).callonInExpr17,
						expr: &seqExpr{
							pos: position{line: 1246, col: 3, offset: 37147},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1246, col: 3, offset: 37147},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1246, col: 8, offset: 37152},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1246, col: 16, offset: 37160},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1246, col: 29, offset: 37173},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1246, col: 39, offset: 37183},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1246, col: 44, offset: 37188},
										expr: &seqExpr{
											pos: position{line: 1246, col: 45, offset: 37189},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1246, col: 45, offset: 37189},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1246, col: 51, offset: 37195},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1246, col: 63, offset: 37207},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 1271, col: 1, offset: 37997},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 14, offset: 38010},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1271, col: 14, offset: 38010},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1271, col: 14, offset: 38010},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 24, offset: 38020},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1280, col: 3, offset: 38210},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 1280, col: 3, offset: 38210},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1280, col: 3, offset: 38210},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 12, offset: 38219},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1280, col: 22, offset: 38229},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1280, col: 37, offset: 38244},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1289, col: 3, offset: 38428},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 1289, col: 3, offset: 38428},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 1289, col: 11, offset: 38436},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1298, col: 3, offset: 38616},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 1298, col: 3, offset: 38616},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 7, offset: 38620},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1307, col: 3, offset: 38792},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 1307, col: 3, offset: 38792},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1307, col: 3, offset: 38792},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1307, col: 12, offset: 38801},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1307, col: 16, offset: 38805},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1307, col: 28, offset: 38817},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1316, col: 3, offset: 38986},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 1316, col: 3, offset: 38986},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1316, col: 3, offset: 38986},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1316, col: 11, offset: 38994},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 1316, col: 19, offset: 39002},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1316, col: 28, offset: 39011},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 1326, col: 1, offset: 39192},
			expr: &choiceExpr{
				pos: position{line: 1326, col: 15, offset: 39206},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1326, col: 15, offset: 39206},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 1326, col: 15, offset: 39206},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1326, col: 15, offset: 39206},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1326, col: 20, offset: 39211},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 1326, col: 29, offset: 39220},
									expr: &ruleRefExpr{
										pos:  position{line: 1326, col: 31, offset: 39222},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1334, col: 3, offset: 39392},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 1334, col: 3, offset: 39392},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1334, col: 3, offset: 39392},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1334, col: 7, offset: 39396},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1334, col: 20, offset: 39409},
									expr: &ruleRefExpr{
										pos:  position{line: 1334, col: 22, offset: 39411},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1342, col: 3, offset: 39576},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 1342, col: 3, offset: 39576},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1342, col: 3, offset: 39576},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1342, col: 9, offset: 39582},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1342, col: 25, offset: 39598},
									expr: &choiceExpr{
										pos: position{line: 1342, col: 27, offset: 39600},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1342, col: 27, offset: 39600},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1342, col: 36, offset: 39609},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1342, col: 46, offset: 39619},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1342, col: 54, offset: 39627},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1342, col: 62, offset: 39635},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1342, col: 76, offset: 39649},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1350, col: 3, offset: 39799},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 1350, col: 3, offset: 39799},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 1350, col: 10, offset: 39806},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 1360, col: 1, offset: 40012},
			expr: &actionExpr{
				pos: position{line: 1360, col: 15, offset: 40026},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 15, offset: 40026},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1360, col: 15, offset: 40026},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 21, offset: 40032},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 32, offset: 40043},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1360, col: 37, offset: 40048},
								expr: &seqExpr{
									pos: position{line: 1360, col: 38, offset: 40049},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1360, col: 38, offset: 40049},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 1360, col: 50, offset: 40061},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 1360, col: 63, offset: 40074},
							expr: &choiceExpr{
								pos: position{line: 1360, col: 65, offset: 40076},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1360, col: 65, offset: 40076},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 74, offset: 40085},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 84, offset: 40095},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 92, offset: 40103},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 1360, col: 100, offset: 40111},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 1378, col: 1, offset: 40517},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 15, offset: 40531},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1378, col: 15, offset: 40531},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 1378, col: 15, offset: 40531},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 20, offset: 40536},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1387, col: 3, offset: 40700},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 1387, col: 3, offset: 40700},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 7, offset: 40704},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1395, col: 3, offset: 40843},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 1395, col: 3, offset: 40843},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 10, offset: 40850},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1403, col: 3, offset: 40989},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 1403, col: 3, offset: 40989},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1403, col: 9, offset: 40995},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 1413, col: 1, offset: 41164},
			expr: &actionExpr{
				pos: position{line: 1413, col: 16, offset: 41179},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 1413, col: 16, offset: 41179},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1413, col: 16, offset: 41179},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 21, offset: 41184},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 1413, col: 39, offset: 41202},
							expr: &choiceExpr{
								pos: position{line: 1413, col: 41, offset: 41204},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1413, col: 41, offset: 41204},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 1413, col: 55, offset: 41218},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 1418, col: 1, offset: 41283},
			expr: &actionExpr{
				pos: position{line: 1418, col: 22, offset: 41304},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1418, col: 22, offset: 41304},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1418, col: 22, offset: 41304},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 28, offset: 41310},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1418, col: 46, offset: 41328},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1418, col: 51, offset: 41333},
								expr: &seqExpr{
									pos: position{line: 1418, col: 52, offset: 41334},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1418, col: 53, offset: 41335},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1418, col: 53, offset: 41335},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 1418, col: 62, offset: 41344},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1418, col: 71, offset: 41353},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 1439, col: 1, offset: 41854},
			expr: &actionExpr{
				pos: position{line: 1439, col: 22, offset: 41875},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 1439, col: 22, offset: 41875},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1439, col: 22, offset: 41875},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 28, offset: 41881},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 46, offset: 41899},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1439, col: 51, offset: 41904},
								expr: &seqExpr{
									pos: position{line: 1439, col: 52, offset: 41905},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1439, col: 53, offset: 41906},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1439, col: 53, offset: 41906},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 1439, col: 61, offset: 41914},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1439, col: 68, offset: 41921},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RoundPrecisionExpr",
			pos:  position{line: 1459, col: 1, offset: 42390},
			expr: &actionExpr{
				pos: position{line: 1459, col: 23, offset: 42412},
				run: (*parser).callonRoundPrecisionExpr1,
				expr: &seqExpr{
					pos: position{line: 1459, col: 23, offset: 42412},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1459, col: 23, offset: 42412},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1459, col: 29, offset: 42418},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1459, col: 34, offset: 42423},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 1469, col: 1, offset: 42671},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 22, offset: 42692},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1469, col: 22, offset: 42692},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1469, col: 22, offset: 42692},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1469, col: 22, offset: 42692},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1469, col: 30, offset: 42700},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1469, col: 35, offset: 42705},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1469, col: 53, offset: 42723},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1472, col: 3, offset: 42758},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1472, col: 3, offset: 42758},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1472, col: 20, offset: 42775},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1475, col: 3, offset: 42829},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 1475, col: 3, offset: 42829},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 9, offset: 42835},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1485, col: 3, offset: 43054},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 1485, col: 3, offset: 43054},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 10, offset: 43061},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 1497, col: 1, offset: 43319},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 20, offset: 43338},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1497, col: 20, offset: 43338},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 1497, col: 21, offset: 43339},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1497, col: 21, offset: 43339},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1497, col: 29, offset: 43347},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1497, col: 29, offset: 43347},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 1497, col: 37, offset: 43355},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 1497, col: 46, offset: 43364},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 1497, col: 54, offset: 43372},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 1497, col: 63, offset: 43381},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1497, col: 70, offset: 43388},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1497, col: 78, offset: 43396},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1497, col: 84, offset: 43402},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1497, col: 103, offset: 43421},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1517, col: 3, offset: 43937},
						run: (*parser).callonNumericEvalExpr15,
						expr: &seqExpr{
							pos: position{line: 1517, col: 3, offset: 43937},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1517, col: 3, offset: 43937},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 1517, col: 13, offset: 43947},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1517, col: 21, offset: 43955},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1517, col: 29, offset: 43963},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1517, col: 35, offset: 43969},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 1517, col: 54, offset: 43988},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 1517, col: 69, offset: 44003},
										expr: &ruleRefExpr{
											pos:  position{line: 1517, col: 70, offset: 44004},
											name: "RoundPrecisionExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1517, col: 91, offset: 44025},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1538, col: 3, offset: 44649},
						run: (*parser).callonNumericEvalExpr26,
						expr: &seqExpr{
							pos: position{line: 1538, col: 3, offset: 44649},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1538, col: 3, offset: 44649},
									val:        "now",
									ignoreCase: false,
									want:       "\"now\"",
								},
								&litMatcher{
									pos:        position{line: 1538, col: 9, offset: 44655},
									val:        "()",
									ignoreCase: false,
									want:       "\"()\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1544, col: 3, offset: 44763},
						run: (*parser).callonNumericEvalExpr30,
						expr: &seqExpr{
							pos: position{line: 1544, col: 3, offset: 44763},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1544, col: 3, offset: 44763},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1544, col: 14, offset: 44774},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1544, col: 22, offset: 44782},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1544, col: 33, offset: 44793},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1544, col: 44, offset: 44804},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1544, col: 53, offset: 44813},
										expr: &seqExpr{
											pos: position{line: 1544, col: 54, offset: 44814},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1544, col: 54, offset: 44814},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1544, col: 60, offset: 44820},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1544, col: 80, offset: 44840},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1572, col: 3, offset: 45687},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 1572, col: 3, offset: 45687},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1572, col: 3, offset: 45687},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 1572, col: 12, offset: 45696},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1572, col: 18, offset: 45702},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 26, offset: 45710},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 31, offset: 45715},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1572, col: 39, offset: 45723},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 1576, col: 1, offset: 45757},
			expr: &choiceExpr{
				pos: position{line: 1576, col: 12, offset: 45768},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1576, col: 12, offset: 45768},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 1576, col: 12, offset: 45768},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1576, col: 12, offset: 45768},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1576, col: 16, offset: 45772},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1576, col: 29, offset: 45785},
									expr: &ruleRefExpr{
										pos:  position{line: 1576, col: 31, offset: 45787},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1592, col: 3, offset: 46152},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 1592, col: 3, offset: 46152},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1592, col: 3, offset: 46152},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1592, col: 9, offset: 46158},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1592, col: 25, offset: 46174},
									expr: &choiceExpr{
										pos: position{line: 1592, col: 27, offset: 46176},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1592, col: 27, offset: 46176},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1592, col: 36, offset: 46185},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1592, col: 46, offset: 46195},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1592, col: 54, offset: 46203},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1592, col: 62, offset: 46211},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1592, col: 76, offset: 46225},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 1610, col: 1, offset: 46617},
			expr: &choiceExpr{
				pos: position{line: 1610, col: 14, offset: 46630},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1610, col: 14, offset: 46630},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 1610, col: 14, offset: 46630},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1610, col: 14, offset: 46630},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1610, col: 19, offset: 46635},
									name: "CMD_HEAD",
								},
								&zeroOrOneExpr{
									pos: position{line: 1610, col: 28, offset: 46644},
									expr: &seqExpr{
										pos: position{line: 1610, col: 29, offset: 46645},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1610, col: 29, offset: 46645},
												val:        "limit",
												ignoreCase: false,
												want:       "\"limit\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1610, col: 37, offset: 46653},
												name: "EQUAL",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1610, col: 45, offset: 46661},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 1610, col: 54, offset: 46670},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1625, col: 3, offset: 47086},
						run: (*parser).callonHeadBlock12,
						expr: &seqExpr{
							pos: position{line: 1625, col: 3, offset: 47086},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1625, col: 3, offset: 47086},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1625, col: 8, offset: 47091},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 1638, col: 1, offset: 47541},
			expr: &actionExpr{
				pos: position{line: 1638, col: 20, offset: 47560},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 1638, col: 20, offset: 47560},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1638, col: 20, offset: 47560},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1638, col: 26, offset: 47566},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1638, col: 37, offset: 47577},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1638, col: 42, offset: 47582},
								expr: &seqExpr{
									pos: position{line: 1638, col: 43, offset: 47583},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1638, col: 44, offset: 47584},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1638, col: 44, offset: 47584},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1638, col: 52, offset: 47592},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1638, col: 59, offset: 47599},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 1655, col: 1, offset: 48102},
			expr: &actionExpr{
				pos: position{line: 1655, col: 15, offset: 48116},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 1655, col: 15, offset: 48116},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1655, col: 15, offset: 48116},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 1655, col: 23, offset: 48124},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 1655, col: 35, offset: 48136},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 1655, col: 43, offset: 48144},
								expr: &ruleRefExpr{
									pos:  position{line: 1655, col: 43, offset: 48144},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 1671, col: 1, offset: 48985},
			expr: &actionExpr{
				pos: position{line: 1671, col: 16, offset: 49000},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 1671, col: 16, offset: 49000},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 1671, col: 21, offset: 49005},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1671, col: 21, offset: 49005},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 32, offset: 49016},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 51, offset: 49035},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 60, offset: 49044},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 69, offset: 49053},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 78, offset: 49062},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 89, offset: 49073},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 98, offset: 49082},
								name: "AggValues",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 1675, col: 1, offset: 49118},
			expr: &actionExpr{
				pos: position{line: 1675, col: 12, offset: 49129},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 1675, col: 12, offset: 49129},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1675, col: 12, offset: 49129},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 1675, col: 15, offset: 49132},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1675, col: 21, offset: 49138},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 1685, col: 1, offset: 49345},
			expr: &choiceExpr{
				pos: position{line: 1685, col: 13, offset: 49357},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1685, col: 13, offset: 49357},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 1685, col: 13, offset: 49357},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1685, col: 14, offset: 49358},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1685, col: 14, offset: 49358},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 1685, col: 24, offset: 49368},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1685, col: 29, offset: 49373},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1685, col: 37, offset: 49381},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1685, col: 44, offset: 49388},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1685, col: 53, offset: 49397},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1685, col: 62, offset: 49406},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1700, col: 3, offset: 49756},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 1700, col: 3, offset: 49756},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1700, col: 4, offset: 49757},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1700, col: 4, offset: 49757},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 1700, col: 14, offset: 49767},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1700, col: 19, offset: 49772},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1700, col: 27, offset: 49780},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1700, col: 33, offset: 49786},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1700, col: 43, offset: 49796},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1707, col: 5, offset: 49947},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 1707, col: 6, offset: 49948},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1707, col: 6, offset: 49948},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 1707, col: 16, offset: 49958},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 1716, col: 1, offset: 50095},
			expr: &choiceExpr{
				pos: position{line: 1716, col: 21, offset: 50115},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1716, col: 21, offset: 50115},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 1716, col: 21, offset: 50115},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1716, col: 22, offset: 50116},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1716, col: 22, offset: 50116},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 1716, col: 41, offset: 50135},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1716, col: 47, offset: 50141},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1716, col: 55, offset: 50149},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1716, col: 62, offset: 50156},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1716, col: 72, offset: 50166},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1716, col: 82, offset: 50176},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1726, col: 3, offset: 50410},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 1726, col: 3, offset: 50410},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1726, col: 4, offset: 50411},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1726, col: 4, offset: 50411},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 1726, col: 23, offset: 50430},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1726, col: 29, offset: 50436},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1726, col: 37, offset: 50444},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1726, col: 43, offset: 50450},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1726, col: 53, offset: 50460},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 1735, col: 1, offset: 50616},
			expr: &choiceExpr{
				pos: position{line: 1735, col: 11, offset: 50626},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1735, col: 11, offset: 50626},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 1735, col: 11, offset: 50626},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1735, col: 11, offset: 50626},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1735, col: 17, offset: 50632},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1735, col: 25, offset: 50640},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1735, col: 32, offset: 50647},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1735, col: 40, offset: 50655},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1735, col: 59, offset: 50674},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1735, col: 78, offset: 50693},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1735, col: 86, offset: 50701},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1750, col: 3, offset: 51059},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 1750, col: 3, offset: 51059},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1750, col: 3, offset: 51059},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1750, col: 9, offset: 51065},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1750, col: 17, offset: 51073},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1750, col: 23, offset: 51079},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1750, col: 33, offset: 51089},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 1759, col: 1, offset: 51237},
			expr: &choiceExpr{
				pos: position{line: 1759, col: 11, offset: 51247},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1759, col: 11, offset: 51247},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 1759, col: 11, offset: 51247},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1759, col: 11, offset: 51247},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1759, col: 17, offset: 51253},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1759, col: 25, offset: 51261},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1759, col: 32, offset: 51268},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1759, col: 40, offset: 51276},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1759, col: 59, offset: 51295},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1759, col: 78, offset: 51314},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1759, col: 86, offset: 51322},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1774, col: 3, offset: 51680},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 1774, col: 3, offset: 51680},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1774, col: 3, offset: 51680},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1774, col: 9, offset: 51686},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1774, col: 17, offset: 51694},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1774, col: 23, offset: 51700},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1774, col: 33, offset: 51710},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 1783, col: 1, offset: 51858},
			expr: &choiceExpr{
				pos: position{line: 1783, col: 11, offset: 51868},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1783, col: 11, offset: 51868},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 1783, col: 11, offset: 51868},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1783, col: 11, offset: 51868},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 17, offset: 51874},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1783, col: 25, offset: 51882},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 32, offset: 51889},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1783, col: 41, offset: 51898},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1783, col: 60, offset: 51917},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 79, offset: 51936},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 87, offset: 51944},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1798, col: 3, offset: 52302},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 1798, col: 3, offset: 52302},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1798, col: 3, offset: 52302},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1798, col: 9, offset: 52308},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1798, col: 17, offset: 52316},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1798, col: 23, offset: 52322},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1798, col: 33, offset: 52332},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 1807, col: 1, offset: 52480},
			expr: &choiceExpr{
				pos: position{line: 1807, col: 13, offset: 52492},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1807, col: 13, offset: 52492},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 1807, col: 13, offset: 52492},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1807, col: 13, offset: 52492},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1807, col: 21, offset: 52500},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1807, col: 29, offset: 52508},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1807, col: 36, offset: 52515},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1807, col: 44, offset: 52523},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1807, col: 63, offset: 52542},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1807, col: 82, offset: 52561},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1807, col: 90, offset: 52569},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1822, col: 3, offset: 52929},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 1822, col: 3, offset: 52929},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1822, col: 3, offset: 52929},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1822, col: 11, offset: 52937},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1822, col: 19, offset: 52945},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1822, col: 25, offset: 52951},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1822, col: 35, offset: 52961},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 1831, col: 1, offset: 53111},
			expr: &choiceExpr{
				pos: position{line: 1831, col: 11, offset: 53121},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1831, col: 11, offset: 53121},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 1831, col: 11, offset: 53121},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1831, col: 11, offset: 53121},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1831, col: 17, offset: 53127},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1831, col: 25, offset: 53135},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1831, col: 32, offset: 53142},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1831, col: 40, offset: 53150},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1831, col: 59, offset: 53169},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1831, col: 78, offset: 53188},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1831, col: 86, offset: 53196},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1846, col: 3, offset: 53554},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 1846, col: 3, offset: 53554},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1846, col: 3, offset: 53554},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1846, col: 9, offset: 53560},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1846, col: 17, offset: 53568},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1846, col: 23, offset: 53574},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1846, col: 33, offset: 53584},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 1855, col: 1, offset: 53732},
			expr: &choiceExpr{
				pos: position{line: 1855, col: 14, offset: 53745},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1855, col: 14, offset: 53745},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 1855, col: 14, offset: 53745},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1855, col: 14, offset: 53745},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1855, col: 23, offset: 53754},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1855, col: 31, offset: 53762},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1855, col: 38, offset: 53769},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1855, col: 48, offset: 53779},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1855, col: 58, offset: 53789},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1865, col: 3, offset: 54018},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 1865, col: 3, offset: 54018},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1865, col: 3, offset: 54018},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 12, offset: 54027},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1865, col: 20, offset: 54035},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1865, col: 26, offset: 54041},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 36, offset: 54051},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 1874, col: 1, offset: 54202},
			expr: &actionExpr{
				pos: position{line: 1874, col: 25, offset: 54226},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 1874, col: 25, offset: 54226},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 1874, col: 39, offset: 54240},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1874, col: 39, offset: 54240},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1874, col: 67, offset: 54268},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 1878, col: 1, offset: 54331},
			expr: &actionExpr{
				pos: position{line: 1878, col: 30, offset: 54360},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 1878, col: 30, offset: 54360},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1878, col: 30, offset: 54360},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 1878, col: 34, offset: 54364},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1878, col: 44, offset: 54374},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1878, col: 48, offset: 54378},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1878, col: 48, offset: 54378},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 1878, col: 67, offset: 54397},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1878, col: 87, offset: 54417},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1878, col: 93, offset: 54423},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 1891, col: 1, offset: 54657},
			expr: &actionExpr{
				pos: position{line: 1891, col: 32, offset: 54688},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 1891, col: 32, offset: 54688},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1891, col: 38, offset: 54694},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 1904, col: 1, offset: 54911},
			expr: &actionExpr{
				pos: position{line: 1904, col: 26, offset: 54936},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 1904, col: 26, offset: 54936},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1904, col: 26, offset: 54936},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 1904, col: 30, offset: 54940},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1904, col: 40, offset: 54950},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1904, col: 43, offset: 54953},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1904, col: 60, offset: 54970},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1904, col: 66, offset: 54976},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 1917, col: 1, offset: 55211},
			expr: &actionExpr{
				pos: position{line: 1917, col: 25, offset: 55235},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 1917, col: 25, offset: 55235},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 1917, col: 39, offset: 55249},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1917, col: 39, offset: 55249},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1917, col: 67, offset: 55277},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 1921, col: 1, offset: 55340},
			expr: &actionExpr{
				pos: position{line: 1921, col: 30, offset: 55369},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 1921, col: 30, offset: 55369},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1921, col: 30, offset: 55369},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 1921, col: 34, offset: 55373},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1921, col: 44, offset: 55383},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1921, col: 47, offset: 55386},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1921, col: 64, offset: 55403},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1921, col: 70, offset: 55409},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 1933, col: 1, offset: 55642},
			expr: &actionExpr{
				pos: position{line: 1933, col: 32, offset: 55673},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 1933, col: 32, offset: 55673},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1933, col: 38, offset: 55679},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 1947, col: 1, offset: 56010},
			expr: &actionExpr{
				pos: position{line: 1947, col: 18, offset: 56027},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 18, offset: 56027},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1947, col: 18, offset: 56027},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1947, col: 24, offset: 56033},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1947, col: 34, offset: 56043},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1947, col: 39, offset: 56048},
								expr: &seqExpr{
									pos: position{line: 1947, col: 40, offset: 56049},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1947, col: 40, offset: 56049},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1947, col: 46, offset: 56055},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1967, col: 1, offset: 56818},
			expr: &actionExpr{
				pos: position{line: 1967, col: 14, offset: 56831},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 1967, col: 14, offset: 56831},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 1967, col: 14, offset: 56831},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1967, col: 27, offset: 56844},
							expr: &charClassMatcher{
								pos:        position{line: 1967, col: 27, offset: 56844},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 1971, col: 1, offset: 56897},
			expr: &actionExpr{
				pos: position{line: 1971, col: 11, offset: 56907},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 1971, col: 11, offset: 56907},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 1971, col: 16, offset: 56912},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1971, col: 16, offset: 56912},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1971, col: 31, offset: 56927},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1975, col: 1, offset: 56968},
			expr: &actionExpr{
				pos: position{line: 1975, col: 17, offset: 56984},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1975, col: 17, offset: 56984},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1975, col: 17, offset: 56984},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1975, col: 21, offset: 56988},
							expr: &charClassMatcher{
								pos:        position{line: 1975, col: 21, offset: 56988},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 1975, col: 27, offset: 56994},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 1980, col: 1, offset: 57105},
			expr: &actionExpr{
				pos: position{line: 1980, col: 12, offset: 57116},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 1980, col: 13, offset: 57117},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1980, col: 13, offset: 57117},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 1980, col: 22, offset: 57126},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 1985, col: 1, offset: 57220},
			expr: &actionExpr{
				pos: position{line: 1985, col: 19, offset: 57238},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1985, col: 19, offset: 57238},
					expr: &choiceExpr{
						pos: position{line: 1985, col: 20, offset: 57239},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1985, col: 20, offset: 57239},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 1985, col: 27, offset: 57246},
								exprs: []any{
									&notExpr{
										pos: position{line: 1985, col: 27, offset: 57246},
										expr: &choiceExpr{
											pos: position{line: 1985, col: 29, offset: 57248},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1985, col: 29, offset: 57248},
													name: "MAJOR_BREAK",
												},
												&ruleRefExpr{
													pos:  position{line: 1985, col: 43, offset: 57262},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 1985, col: 48, offset: 57267,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 1992, col: 1, offset: 57441},
			expr: &actionExpr{
				pos: position{line: 1992, col: 18, offset: 57458},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1992, col: 18, offset: 57458},
					expr: &charClassMatcher{
						pos:        position{line: 1992, col: 18, offset: 57458},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1996, col: 1, offset: 57509},
			expr: &actionExpr{
				pos: position{line: 1996, col: 11, offset: 57519},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 1996, col: 11, offset: 57519},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 1996, col: 18, offset: 57526},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 2002, col: 1, offset: 57715},
			expr: &actionExpr{
				pos: position{line: 2002, col: 19, offset: 57733},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 2002, col: 19, offset: 57733},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2002, col: 19, offset: 57733},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 2002, col: 27, offset: 57741},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2002, col: 27, offset: 57741},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 2002, col: 43, offset: 57757},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 2002, col: 60, offset: 57774},
							expr: &choiceExpr{
								pos: position{line: 2002, col: 62, offset: 57776},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2002, col: 62, offset: 57776},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 2002, col: 70, offset: 57784},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 2002, col: 76, offset: 57790},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2002, col: 82, offset: 57796},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 2008, col: 1, offset: 57925},
			expr: &actionExpr{
				pos: position{line: 2008, col: 18, offset: 57942},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 2008, col: 18, offset: 57942},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2008, col: 18, offset: 57942},
							expr: &charClassMatcher{
								pos:        position{line: 2008, col: 18, offset: 57942},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2008, col: 24, offset: 57948},
							expr: &charClassMatcher{
								pos:        position{line: 2008, col: 24, offset: 57948},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 2008, col: 31, offset: 57955},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 2008, col: 35, offset: 57959},
							expr: &charClassMatcher{
								pos:        position{line: 2008, col: 35, offset: 57959},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 2013, col: 1, offset: 58054},
			expr: &actionExpr{
				pos: position{line: 2013, col: 20, offset: 58073},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 2013, col: 20, offset: 58073},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2013, col: 20, offset: 58073},
							expr: &charClassMatcher{
								pos:        position{line: 2013, col: 20, offset: 58073},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2013, col: 26, offset: 58079},
							expr: &charClassMatcher{
								pos:        position{line: 2013, col: 26, offset: 58079},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 2017, col: 1, offset: 58122},
			expr: &actionExpr{
				pos: position{line: 2017, col: 21, offset: 58142},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 2017, col: 21, offset: 58142},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2017, col: 21, offset: 58142},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 2017, col: 36, offset: 58157},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 2017, col: 40, offset: 58161},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2017, col: 40, offset: 58161},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 2017, col: 46, offset: 58167},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2017, col: 52, offset: 58173},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 2025, col: 1, offset: 58354},
			expr: &actionExpr{
				pos: position{line: 2025, col: 23, offset: 58376},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 2025, col: 23, offset: 58376},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2025, col: 23, offset: 58376},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 2025, col: 38, offset: 58391},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 2025, col: 42, offset: 58395},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2025, col: 42, offset: 58395},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 2025, col: 49, offset: 58402},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 2025, col: 55, offset: 58408},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 2025, col: 62, offset: 58415},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2025, col: 67, offset: 58420},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 2033, col: 1, offset: 58603},
			expr: &choiceExpr{
				pos: position{line: 2033, col: 25, offset: 58627},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2033, col: 25, offset: 58627},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 2033, col: 25, offset: 58627},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2033, col: 28, offset: 58630},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2036, col: 3, offset: 58672},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 2036, col: 3, offset: 58672},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2036, col: 6, offset: 58675},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 2040, col: 1, offset: 58718},
			expr: &actionExpr{
				pos: position{line: 2040, col: 11, offset: 58728},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 2040, col: 11, offset: 58728},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2040, col: 11, offset: 58728},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 2040, col: 26, offset: 58743},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2040, col: 30, offset: 58747},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 2044, col: 1, offset: 58787},
			expr: &actionExpr{
				pos: position{line: 2044, col: 12, offset: 58798},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 2044, col: 12, offset: 58798},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2044, col: 12, offset: 58798},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 2044, col: 27, offset: 58813},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2044, col: 31, offset: 58817},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 2048, col: 1, offset: 58857},
			expr: &actionExpr{
				pos: position{line: 2048, col: 10, offset: 58866},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 2048, col: 10, offset: 58866},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2048, col: 10, offset: 58866},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 2048, col: 25, offset: 58881},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2048, col: 29, offset: 58885},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 2052, col: 1, offset: 58925},
			expr: &actionExpr{
				pos: position{line: 2052, col: 10, offset: 58934},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 2052, col: 10, offset: 58934},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2052, col: 10, offset: 58934},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 2052, col: 25, offset: 58949},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2052, col: 29, offset: 58953},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 2057, col: 1, offset: 59017},
			expr: &actionExpr{
				pos: position{line: 2057, col: 11, offset: 59027},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 2057, col: 12, offset: 59028},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2057, col: 12, offset: 59028},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 2057, col: 24, offset: 59040},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 2057, col: 35, offset: 59051},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 2057, col: 44, offset: 59060},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 2057, col: 52, offset: 59068},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 2061, col: 1, offset: 59109},
			expr: &actionExpr{
				pos: position{line: 2061, col: 11, offset: 59119},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 2061, col: 12, offset: 59120},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2061, col: 12, offset: 59120},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 2061, col: 24, offset: 59132},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 2061, col: 35, offset: 59143},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 2061, col: 44, offset: 59152},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 2061, col: 52, offset: 59160},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 2065, col: 1, offset: 59201},
			expr: &actionExpr{
				pos: position{line: 2065, col: 9, offset: 59209},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 2065, col: 10, offset: 59210},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2065, col: 10, offset: 59210},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 2065, col: 20, offset: 59220},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 2065, col: 29, offset: 59229},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 2065, col: 37, offset: 59237},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 2065, col: 44, offset: 59244},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 2069, col: 1, offset: 59283},
			expr: &actionExpr{
				pos: position{line: 2069, col: 8, offset: 59290},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 2069, col: 9, offset: 59291},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2069, col: 9, offset: 59291},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 2069, col: 18, offset: 59300},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 2069, col: 26, offset: 59308},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 2073, col: 1, offset: 59346},
			expr: &actionExpr{
				pos: position{line: 2073, col: 9, offset: 59354},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 2073, col: 10, offset: 59355},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2073, col: 10, offset: 59355},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 2073, col: 20, offset: 59365},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 2073, col: 29, offset: 59374},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 2077, col: 1, offset: 59413},
			expr: &actionExpr{
				pos: position{line: 2077, col: 10, offset: 59422},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 2077, col: 11, offset: 59423},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2077, col: 11, offset: 59423},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 2077, col: 22, offset: 59434},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 2077, col: 32, offset: 59444},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 2081, col: 1, offset: 59486},
			expr: &actionExpr{
				pos: position{line: 2081, col: 12, offset: 59497},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 2081, col: 13, offset: 59498},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2081, col: 13, offset: 59498},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 2081, col: 26, offset: 59511},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 2081, col: 38, offset: 59523},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 2081, col: 47, offset: 59532},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 2081, col: 55, offset: 59540},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 2086, col: 1, offset: 59674},
			expr: &actionExpr{
				pos: position{line: 2086, col: 15, offset: 59688},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 2086, col: 16, offset: 59689},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2086, col: 16, offset: 59689},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 2086, col: 23, offset: 59696},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 2086, col: 30, offset: 59703},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 2086, col: 37, offset: 59710},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 2095, col: 1, offset: 59933},
			expr: &actionExpr{
				pos: position{line: 2095, col: 21, offset: 59953},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 2095, col: 21, offset: 59953},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2095, col: 21, offset: 59953},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2095, col: 26, offset: 59958},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 2095, col: 42, offset: 59974},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 2095, col: 53, offset: 59985},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 2104, col: 1, offset: 60291},
			expr: &actionExpr{
				pos: position{line: 2104, col: 23, offset: 60313},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 2104, col: 23, offset: 60313},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 2104, col: 34, offset: 60324},
						expr: &ruleRefExpr{
							pos:  position{line: 2104, col: 34, offset: 60324},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 2119, col: 1, offset: 60715},
			expr: &actionExpr{
				pos: position{line: 2119, col: 37, offset: 60751},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 2119, col: 37, offset: 60751},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2119, col: 37, offset: 60751},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2119, col: 43, offset: 60757},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 2119, col: 71, offset: 60785},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2119, col: 76, offset: 60790},
								expr: &seqExpr{
									pos: position{line: 2119, col: 77, offset: 60791},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2119, col: 77, offset: 60791},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 2119, col: 83, offset: 60797},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 2154, col: 1, offset: 61786},
			expr: &actionExpr{
				pos: position{line: 2154, col: 32, offset: 61817},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 2154, col: 32, offset: 61817},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 2154, col: 40, offset: 61825},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2154, col: 40, offset: 61825},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 2154, col: 70, offset: 61855},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 2154, col: 89, offset: 61874},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 2160, col: 1, offset: 62020},
			expr: &actionExpr{
				pos: position{line: 2160, col: 32, offset: 62051},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 2160, col: 32, offset: 62051},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2160, col: 32, offset: 62051},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2160, col: 38, offset: 62057},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 2160, col: 48, offset: 62067},
							expr: &ruleRefExpr{
								pos:  position{line: 2160, col: 50, offset: 62069},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 2160, col: 57, offset: 62076},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2160, col: 62, offset: 62081},
								expr: &seqExpr{
									pos: position{line: 2160, col: 63, offset: 62082},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2160, col: 63, offset: 62082},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 2160, col: 69, offset: 62088},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 2160, col: 79, offset: 62098},
											expr: &ruleRefExpr{
												pos:  position{line: 2160, col: 81, offset: 62100},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 2178, col: 1, offset: 62524},
			expr: &actionExpr{
				pos: position{line: 2178, col: 21, offset: 62544},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 2178, col: 21, offset: 62544},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2178, col: 21, offset: 62544},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2178, col: 34, offset: 62557},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2178, col: 40, offset: 62563},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2178, col: 48, offset: 62571},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 2188, col: 1, offset: 62809},
			expr: &actionExpr{
				pos: position{line: 2188, col: 19, offset: 62827},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 2188, col: 19, offset: 62827},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2188, col: 19, offset: 62827},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2188, col: 30, offset: 62838},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2188, col: 36, offset: 62844},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2188, col: 44, offset: 62852},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 2199, col: 1, offset: 63122},
			expr: &actionExpr{
				pos: position{line: 2199, col: 28, offset: 63149},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 2199, col: 28, offset: 63149},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 2199, col: 37, offset: 63158},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2199, col: 37, offset: 63158},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 2199, col: 63, offset: 63184},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 2199, col: 81, offset: 63202},
								name: "TransactionSearch",
							},
							&ruleRefExpr{
								pos:  position{line: 2199, col: 101, offset: 63222},
								name: "TransactionQuotedStringClausesExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 2203, col: 1, offset: 63287},
			expr: &actionExpr{
				pos: position{line: 2203, col: 28, offset: 63314},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 2203, col: 28, offset: 63314},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 2203, col: 33, offset: 63319},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2203, col: 33, offset: 63319},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 2203, col: 64, offset: 63350},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 2207, col: 1, offset: 63410},
			expr: &actionExpr{
				pos: position{line: 2207, col: 38, offset: 63447},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 2207, col: 38, offset: 63447},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2207, col: 38, offset: 63447},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 2207, col: 42, offset: 63451},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 2207, col: 55, offset: 63464},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 2207, col: 68, offset: 63477},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 2216, col: 1, offset: 63680},
			expr: &actionExpr{
				pos: position{line: 2216, col: 21, offset: 63700},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 2216, col: 21, offset: 63700},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2216, col: 21, offset: 63700},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2216, col: 25, offset: 63704},
							expr: &charClassMatcher{
								pos:        position{line: 2216, col: 25, offset: 63704},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 2216, col: 44, offset: 63723},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 2221, col: 1, offset: 63834},
			expr: &actionExpr{
				pos: position{line: 2221, col: 33, offset: 63866},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 2221, col: 33, offset: 63866},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2221, col: 37, offset: 63870},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringClausesExpr",
			pos:  position{line: 2229, col: 1, offset: 64025},
			expr: &actionExpr{
				pos: position{line: 2229, col: 39, offset: 64063},
				run: (*parser).callonTransactionQuotedStringClausesExpr1,
				expr: &seqExpr{
					pos: position{line: 2229, col: 39, offset: 64063},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2229, col: 39, offset: 64063},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 2229, col: 47, offset: 64071},
							label: "cl",
							expr: &ruleRefExpr{
								pos:  position{line: 2229, col: 50, offset: 64074},
								name: "StringClauseListAnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2229, col: 70, offset: 64094},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "StringClauseListAnd",
			pos:  position{line: 2238, col: 1, offset: 64233},
			expr: &actionExpr{
				pos: position{line: 2238, col: 24, offset: 64256},
				run: (*parser).callonStringClauseListAnd1,
				expr: &seqExpr{
					pos: position{line: 2238, col: 24, offset: 64256},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2238, col: 24, offset: 64256},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2238, col: 30, offset: 64262},
								name: "StringClauseListOr",
							},
						},
						&labeledExpr{
							pos:   position{line: 2238, col: 49, offset: 64281},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2238, col: 54, offset: 64286},
								expr: &seqExpr{
									pos: position{line: 2238, col: 55, offset: 64287},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2238, col: 55, offset: 64287},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 2238, col: 59, offset: 64291},
											name: "StringClauseListOr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringClauseListOr",
			pos:  position{line: 2249, col: 1, offset: 64532},
			expr: &actionExpr{
				pos: position{line: 2249, col: 23, offset: 64554},
				run: (*parser).callonStringClauseListOr1,
				expr: &seqExpr{
					pos: position{line: 2249, col: 23, offset: 64554},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2249, col: 23, offset: 64554},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2249, col: 29, offset: 64560},
								name: "QuotedString",
							},
						},
						&labeledExpr{
							pos:   position{line: 2249, col: 42, offset: 64573},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2249, col: 47, offset: 64578},
								expr: &seqExpr{
									pos: position{line: 2249, col: 48, offset: 64579},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2249, col: 48, offset: 64579},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 2249, col: 51, offset: 64582},
											name: "QuotedString",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 2261, col: 1, offset: 64876},
			expr: &actionExpr{
				pos: position{line: 2261, col: 22, offset: 64897},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 2261, col: 22, offset: 64897},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 2261, col: 27, offset: 64902},
						name: "SearchTerm",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 2276, col: 1, offset: 65230},
			expr: &actionExpr{
				pos: position{line: 2276, col: 20, offset: 65249},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 2276, col: 20, offset: 65249},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2276, col: 20, offset: 65249},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2276, col: 27, offset: 65256},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 2276, col: 42, offset: 65271},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 2276, col: 50, offset: 65279},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2276, col: 60, offset: 65289},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2276, col: 69, offset: 65298},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 2286, col: 1, offset: 65479},
			expr: &choiceExpr{
				pos: position{line: 2286, col: 12, offset: 65490},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2286, col: 12, offset: 65490},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 24, offset: 65502},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 36, offset: 65514},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 49, offset: 65527},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 61, offset: 65539},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 81, offset: 65559},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 92, offset: 65570},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 103, offset: 65581},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 113, offset: 65591},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 123, offset: 65601},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 134, offset: 65612},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 147, offset: 65625},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 2286, col: 163, offset: 65641},
						name: "CMD_TRANSACTION",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 2287, col: 1, offset: 65658},
			expr: &seqExpr{
				pos: position{line: 2287, col: 15, offset: 65672},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2287, col: 15, offset: 65672},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2287, col: 24, offset: 65681},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 2288, col: 1, offset: 65687},
			expr: &seqExpr{
				pos: position{line: 2288, col: 14, offset: 65700},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2288, col: 14, offset: 65700},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2288, col: 22, offset: 65708},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 2289, col: 1, offset: 65714},
			expr: &seqExpr{
				pos: position{line: 2289, col: 14, offset: 65727},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2289, col: 14, offset: 65727},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2289, col: 22, offset: 65735},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 2290, col: 1, offset: 65741},
			expr: &seqExpr{
				pos: position{line: 2290, col: 15, offset: 65755},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2290, col: 15, offset: 65755},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2290, col: 24, offset: 65764},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 2291, col: 1, offset: 65770},
			expr: &seqExpr{
				pos: position{line: 2291, col: 14, offset: 65783},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2291, col: 14, offset: 65783},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2291, col: 22, offset: 65791},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 2292, col: 1, offset: 65797},
			expr: &litMatcher{
				pos:        position{line: 2292, col: 22, offset: 65818},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 2293, col: 1, offset: 65825},
			expr: &seqExpr{
				pos: position{line: 2293, col: 13, offset: 65837},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2293, col: 13, offset: 65837},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 2293, col: 31, offset: 65855},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 2294, col: 1, offset: 65861},
			expr: &seqExpr{
				pos: position{line: 2294, col: 13, offset: 65873},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2294, col: 13, offset: 65873},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2294, col: 20, offset: 65880},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 2295, col: 1, offset: 65886},
			expr: &seqExpr{
				pos: position{line: 2295, col: 12, offset: 65897},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2295, col: 12, offset: 65897},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2295, col: 18, offset: 65903},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 2296, col: 1, offset: 65909},
			expr: &litMatcher{
				pos:        position{line: 2296, col: 12, offset: 65920},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 2297, col: 1, offset: 65926},
			expr: &litMatcher{
				pos:        position{line: 2297, col: 13, offset: 65938},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 2298, col: 1, offset: 65945},
			expr: &seqExpr{
				pos: position{line: 2298, col: 15, offset: 65959},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2298, col: 15, offset: 65959},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2298, col: 24, offset: 65968},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 2299, col: 1, offset: 65974},
			expr: &seqExpr{
				pos: position{line: 2299, col: 18, offset: 65991},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2299, col: 18, offset: 65991},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2299, col: 30, offset: 66003},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 2300, col: 1, offset: 66009},
			expr: &litMatcher{
				pos:        position{line: 2300, col: 13, offset: 66021},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 2301, col: 1, offset: 66028},
			expr: &seqExpr{
				pos: position{line: 2301, col: 20, offset: 66047},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2301, col: 20, offset: 66047},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2301, col: 34, offset: 66061},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 2302, col: 1, offset: 66067},
			expr: &seqExpr{
				pos: position{line: 2302, col: 16, offset: 66082},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 2302, col: 16, offset: 66082},
						expr: &ruleRefExpr{
							pos:  position{line: 2302, col: 16, offset: 66082},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 2302, col: 23, offset: 66089},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 2302, col: 27, offset: 66093},
						expr: &ruleRefExpr{
							pos:  position{line: 2302, col: 27, offset: 66093},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 2305, col: 1, offset: 66204},
			expr: &choiceExpr{
				pos: position{line: 2305, col: 16, offset: 66219},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 2305, col: 16, offset: 66219},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 2305, col: 47, offset: 66250},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 2305, col: 55, offset: 66258},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 2306, col: 16, offset: 66281},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 2306, col: 26, offset: 66291},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 2306, col: 34, offset: 66299},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 2306, col: 42, offset: 66307},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 2306, col: 50, offset: 66315},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 2306, col: 58, offset: 66323},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 2306, col: 66, offset: 66331},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 2307, col: 16, offset: 66353},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 2307, col: 26, offset: 66363},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 2307, col: 34, offset: 66371},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 2307, col: 42, offset: 66379},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 2307, col: 50, offset: 66387},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 2307, col: 58, offset: 66395},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 2307, col: 66, offset: 66403},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 2307, col: 74, offset: 66411},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 2308, col: 1, offset: 66417},
			expr: &choiceExpr{
				pos: position{line: 2308, col: 16, offset: 66432},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 2308, col: 16, offset: 66432},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 2308, col: 30, offset: 66446},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 2308, col: 36, offset: 66452},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 2312, col: 1, offset: 66608},
			expr: &seqExpr{
				pos: position{line: 2312, col: 8, offset: 66615},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2312, col: 8, offset: 66615},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2312, col: 14, offset: 66621},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 2313, col: 1, offset: 66627},
			expr: &seqExpr{
				pos: position{line: 2313, col: 7, offset: 66633},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2313, col: 7, offset: 66633},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2313, col: 13, offset: 66639},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2313, col: 18, offset: 66644},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 2314, col: 1, offset: 66650},
			expr: &seqExpr{
				pos: position{line: 2314, col: 8, offset: 66657},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2314, col: 8, offset: 66657},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2314, col: 14, offset: 66663},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2314, col: 20, offset: 66669},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 2315, col: 1, offset: 66675},
			expr: &seqExpr{
				pos: position{line: 2315, col: 9, offset: 66683},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2315, col: 9, offset: 66683},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2315, col: 15, offset: 66689},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2315, col: 19, offset: 66693},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 2316, col: 1, offset: 66699},
			expr: &seqExpr{
				pos: position{line: 2316, col: 7, offset: 66705},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2316, col: 7, offset: 66705},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2316, col: 13, offset: 66711},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 2316, col: 19, offset: 66717},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 2317, col: 1, offset: 66743},
			expr: &seqExpr{
				pos: position{line: 2317, col: 7, offset: 66749},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2317, col: 7, offset: 66749},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2317, col: 13, offset: 66755},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 2317, col: 19, offset: 66761},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 2319, col: 1, offset: 66788},
			expr: &seqExpr{
				pos: position{line: 2319, col: 10, offset: 66797},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2319, col: 10, offset: 66797},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2319, col: 25, offset: 66812},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2319, col: 29, offset: 66816},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 2320, col: 1, offset: 66831},
			expr: &seqExpr{
				pos: position{line: 2320, col: 10, offset: 66840},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2320, col: 10, offset: 66840},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2320, col: 25, offset: 66855},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2320, col: 29, offset: 66859},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 2321, col: 1, offset: 66874},
			expr: &seqExpr{
				pos: position{line: 2321, col: 12, offset: 66885},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2321, col: 12, offset: 66885},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2321, col: 16, offset: 66889},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 2322, col: 1, offset: 66904},
			expr: &seqExpr{
				pos: position{line: 2322, col: 12, offset: 66915},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2322, col: 12, offset: 66915},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2322, col: 27, offset: 66930},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2324, col: 1, offset: 66935},
			expr: &notExpr{
				pos: position{line: 2324, col: 8, offset: 66942},
				expr: &anyMatcher{
					line: 2324, col: 9, offset: 66943,
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 2325, col: 1, offset: 66945},
			expr: &choiceExpr{
				pos: position{line: 2325, col: 10, offset: 66954},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 2325, col: 11, offset: 66955},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 2325, col: 11, offset: 66955},
								expr: &litMatcher{
									pos:        position{line: 2325, col: 11, offset: 66955},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2325, col: 16, offset: 66960},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 2325, col: 24, offset: 66968},
								expr: &litMatcher{
									pos:        position{line: 2325, col: 24, offset: 66968},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2325, col: 32, offset: 66976},
						expr: &litMatcher{
							pos:        position{line: 2325, col: 32, offset: 66976},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 2326, col: 1, offset: 66981},
			expr: &seqExpr{
				pos: position{line: 2326, col: 12, offset: 66992},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2326, col: 12, offset: 66992},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2326, col: 18, offset: 66998},
						expr: &seqExpr{
							pos: position{line: 2326, col: 19, offset: 66999},
							exprs: []any{
								&notExpr{
									pos: position{line: 2326, col: 19, offset: 66999},
									expr: &litMatcher{
										pos:        position{line: 2326, col: 21, offset: 67001},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 2326, col: 28, offset: 67008,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2326, col: 32, offset: 67012},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 2327, col: 1, offset: 67018},
			expr: &choiceExpr{
				pos: position{line: 2327, col: 20, offset: 67037},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2327, col: 20, offset: 67037},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2327, col: 28, offset: 67045},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     ANDAND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(binOptions, expr, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	switch expr.(type) {
	case *singleAggTemp:
		singleAgg := &structs.SingleAgg{}
		aggTemp := expr.(*singleAggTemp)

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	//  case (<eval-expression>) BY <split-by-clause>) to be finished
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: either single-agg or eval-expression BY split-by-clause is required")
	}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	bOptions := binOptions.(*structs.BinOptions)

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["binOptions"], stack["expr"], stack["limitExpr"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field, tcOptions any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	if tcOptions != nil {
		splitByClause.TcOptions = tcOptions.(*structs.TcOptions)
	}
	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"], stack["tcOptions"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}

		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.Options = options.(*structs.Options)
	} else {
		statisticExpr.Options = &structs.Options{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onOptions1(option any) (any, error) {
	//Default value
	options := &structs.Options{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptions1(stack["option"])
}

func (c *current) onOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr1(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr1(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}

	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr10(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:           opNameStr,
		MaxMinValues: values,
	}
	return node, nil

}

func (p *parser) callonTextExpr10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr10(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr25(opName, url any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       url.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil

}

func (p *parser) callonTextExpr25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr25(stack["opName"], stack["url"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Value:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr44(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert stringExpr as *structs.StringExpr")
	}
	startIndexConverted, ok := startIndex.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert startIndex as *structs.NumericExpr")
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Value:      stringExprConverted,
		StartIndex: startIndexConverted,
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr44(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr60(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Format:     formatExpr,
	}, nil
}

func (p *parser) callonTextExpr60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr60(stack["value"], stack["format"])
}

func (c *current) onTextExpr72(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	stringExpr, ok := expr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert expr as *structs.StringExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr,
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr72(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["op"], stack["value"])
}

func (c *current) onBoolExprLevel120(likeExpr any) (any, error) {
	return likeExpr, nil
}

func (p *parser) callonBoolExprLevel120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel120(stack["likeExpr"])
}

func (c *current) onLikeExpr2(left, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    "like",
	}
	return expr, nil
}

func (p *parser) callonLikeExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr2(stack["left"], stack["right"])
}

func (c *current) onLikeExpr11(stringr, pattern any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  stringr.(*structs.ValueExpr),
		RightValue: pattern.(*structs.ValueExpr),
		ValueOp:    "like",
	}
	return expr, nil

}

func (p *parser) callonLikeExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr11(stack["stringr"], stack["pattern"])
}

func (c *current) onLikeExpr21(stringVal, pattern any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  stringVal.(*structs.ValueExpr),
		RightValue: pattern.(*structs.ValueExpr),
		ValueOp:    "match",
	}
	return expr, nil

}

func (p *parser) callonLikeExpr21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr21(stack["stringVal"], stack["pattern"])
}

func (c *current) onLikeExpr31(cidr, ip any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  cidr.(*structs.ValueExpr),
		RightValue: ip.(*structs.ValueExpr),
		ValueOp:    "cidrmatch",
	}
	return expr, nil
}

func (p *parser) callonLikeExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr31(stack["cidr"], stack["ip"])
}

func (c *current) onLikeExpr41(inExpr any) (any, error) {
	return inExpr, nil
}

func (p *parser) callonLikeExpr41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr41(stack["inExpr"])
}

func (c *current) onLikeExpr44(boolComparisonExpr any) (any, error) {
	return boolComparisonExpr, nil
}

func (p *parser) callonLikeExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr44(stack["boolComparisonExpr"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onInExpr2(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr2(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onInExpr17(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr17(stack["valueToJudge"], stack["rest"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onRoundPrecisionExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonRoundPrecisionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoundPrecisionExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr15(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr15(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr26() (any, error) {
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         "now",
	}, nil
}

func (p *parser) callonNumericEvalExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr26()
}

func (c *current) onNumericEvalExpr30(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr30(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr42(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["lenExpr"], stack["expr"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: limit,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["intAsStr"])
}

func (c *current) onHeadBlock12() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock12()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	fmt.Println("TransactionQuotedStringSearchExpr: ", searchClause.(*ast.Node))
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: "root",
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionQuotedStringClausesExpr1(cl any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		StringClauses: cl.([][]string),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringClausesExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringClausesExpr1(stack["cl"])
}

func (c *current) onStringClauseListAnd1(first, rest any) (any, error) {
	var orClauses [][]string

	orClauses = append(orClauses, first.([]string))
	for _, r := range rest.([]any) {
		orClauses = append(orClauses, r.([]any)[1].([]string))
	}

	return orClauses, nil
}

func (p *parser) callonStringClauseListAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringClauseListAnd1(stack["first"], stack["rest"])
}

func (c *current) onStringClauseListOr1(first, rest any) (any, error) {
	var strs []string

	strs = append(strs, removeQuotes(first.(string)))
	for _, r := range rest.([]any) {
		// Extracting the string from the tuple (OR, QuotedString)
		strs = append(strs, removeQuotes(r.([]any)[1].(string)))
	}

	return strs, nil
}

func (p *parser) callonStringClauseListOr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringClauseListOr1(stack["first"], stack["rest"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {
	astNode := expr.(*ast.Node)

	simpleSearchExpr, err := resolveAstToSimpleSearch(astNode)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TransactionSearch: %v", err)
	}

	filterStrExpr := &structs.FilterStringExpr{
		SearchTerm: simpleSearchExpr,
	}
	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
